/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IZKSmartHealthCardsInterface extends ethers.utils.Interface {
  functions: {
    "addMember(uint256,uint256)": FunctionFragment;
    "addRelayer(address)": FunctionFragment;
    "createImmunization(uint256,uint8,uint256,string,string,string)": FunctionFragment;
    "isEligible(uint256,string,string)": FunctionFragment;
    "removeMember(uint256,uint256,uint256[],uint8[])": FunctionFragment;
    "removeRelayer(address)": FunctionFragment;
    "verifyMembership(uint256,bytes32,uint256,uint256,uint256[8])": FunctionFragment;
    "withdraw()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addMember",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "addRelayer", values: [string]): string;
  encodeFunctionData(
    functionFragment: "createImmunization",
    values: [BigNumberish, BigNumberish, BigNumberish, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isEligible",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeMember",
    values: [BigNumberish, BigNumberish, BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "removeRelayer",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyMembership",
    values: [
      BigNumberish,
      BytesLike,
      BigNumberish,
      BigNumberish,
      [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]
    ]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(functionFragment: "addMember", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addRelayer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createImmunization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isEligible", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeRelayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyMembership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "ImmunizationCreated(uint256,uint8,uint256,address,string,string,string)": EventFragment;
    "RelayerAdded(address)": EventFragment;
    "RelayerRemoved(address)": EventFragment;
    "VerifierAdded(tuple)": EventFragment;
    "VerifierRemoved(tuple)": EventFragment;
    "Withdraw(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ImmunizationCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RelayerAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RelayerRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VerifierAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VerifierRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export type ImmunizationCreatedEvent = TypedEvent<
  [BigNumber, number, BigNumber, string, string, string, string] & {
    immunizationId: BigNumber;
    depth: number;
    zeroValue: BigNumber;
    adminAddress: string;
    vaccineType: string;
    vaccineCodeSystem: string;
    vaccineCodeCode: string;
  }
>;

export type RelayerAddedEvent = TypedEvent<
  [string] & { relayerAddress: string }
>;

export type RelayerRemovedEvent = TypedEvent<
  [string] & { relayerAddress: string }
>;

export type VerifierAddedEvent = TypedEvent<
  [[string, number] & { contractAddress: string; merkleTreeDepth: number }] & {
    verifier: [string, number] & {
      contractAddress: string;
      merkleTreeDepth: number;
    };
  }
>;

export type VerifierRemovedEvent = TypedEvent<
  [[string, number] & { contractAddress: string; merkleTreeDepth: number }] & {
    verifier: [string, number] & {
      contractAddress: string;
      merkleTreeDepth: number;
    };
  }
>;

export type WithdrawEvent = TypedEvent<[string] & { operator: string }>;

export class IZKSmartHealthCards extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IZKSmartHealthCardsInterface;

  functions: {
    addMember(
      _immunizationId: BigNumberish,
      _identityCommitment: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addRelayer(
      _relayer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createImmunization(
      _immunizationId: BigNumberish,
      _depth: BigNumberish,
      _zeroValue: BigNumberish,
      _vaccineType: string,
      _vaccineCodeSystem: string,
      _vaccineCodeCode: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isEligible(
      _immunizationId: BigNumberish,
      _vaccineCodeSystem: string,
      _vaccineCodeCode: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    removeMember(
      _immunizationId: BigNumberish,
      _identityCommitment: BigNumberish,
      _proofSiblings: BigNumberish[],
      _proofPathIndices: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeRelayer(
      _relayer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    verifyMembership(
      _immunizationId: BigNumberish,
      _signal: BytesLike,
      _nullifierHash: BigNumberish,
      _externalNullifier: BigNumberish,
      _proof: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addMember(
    _immunizationId: BigNumberish,
    _identityCommitment: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addRelayer(
    _relayer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createImmunization(
    _immunizationId: BigNumberish,
    _depth: BigNumberish,
    _zeroValue: BigNumberish,
    _vaccineType: string,
    _vaccineCodeSystem: string,
    _vaccineCodeCode: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isEligible(
    _immunizationId: BigNumberish,
    _vaccineCodeSystem: string,
    _vaccineCodeCode: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  removeMember(
    _immunizationId: BigNumberish,
    _identityCommitment: BigNumberish,
    _proofSiblings: BigNumberish[],
    _proofPathIndices: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeRelayer(
    _relayer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  verifyMembership(
    _immunizationId: BigNumberish,
    _signal: BytesLike,
    _nullifierHash: BigNumberish,
    _externalNullifier: BigNumberish,
    _proof: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    overrides?: CallOverrides
  ): Promise<boolean>;

  withdraw(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addMember(
      _immunizationId: BigNumberish,
      _identityCommitment: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    addRelayer(_relayer: string, overrides?: CallOverrides): Promise<void>;

    createImmunization(
      _immunizationId: BigNumberish,
      _depth: BigNumberish,
      _zeroValue: BigNumberish,
      _vaccineType: string,
      _vaccineCodeSystem: string,
      _vaccineCodeCode: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isEligible(
      _immunizationId: BigNumberish,
      _vaccineCodeSystem: string,
      _vaccineCodeCode: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    removeMember(
      _immunizationId: BigNumberish,
      _identityCommitment: BigNumberish,
      _proofSiblings: BigNumberish[],
      _proofPathIndices: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    removeRelayer(_relayer: string, overrides?: CallOverrides): Promise<void>;

    verifyMembership(
      _immunizationId: BigNumberish,
      _signal: BytesLike,
      _nullifierHash: BigNumberish,
      _externalNullifier: BigNumberish,
      _proof: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<boolean>;

    withdraw(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "ImmunizationCreated(uint256,uint8,uint256,address,string,string,string)"(
      immunizationId?: BigNumberish | null,
      depth?: null,
      zeroValue?: null,
      adminAddress?: string | null,
      vaccineType?: null,
      vaccineCodeSystem?: null,
      vaccineCodeCode?: null
    ): TypedEventFilter<
      [BigNumber, number, BigNumber, string, string, string, string],
      {
        immunizationId: BigNumber;
        depth: number;
        zeroValue: BigNumber;
        adminAddress: string;
        vaccineType: string;
        vaccineCodeSystem: string;
        vaccineCodeCode: string;
      }
    >;

    ImmunizationCreated(
      immunizationId?: BigNumberish | null,
      depth?: null,
      zeroValue?: null,
      adminAddress?: string | null,
      vaccineType?: null,
      vaccineCodeSystem?: null,
      vaccineCodeCode?: null
    ): TypedEventFilter<
      [BigNumber, number, BigNumber, string, string, string, string],
      {
        immunizationId: BigNumber;
        depth: number;
        zeroValue: BigNumber;
        adminAddress: string;
        vaccineType: string;
        vaccineCodeSystem: string;
        vaccineCodeCode: string;
      }
    >;

    "RelayerAdded(address)"(
      relayerAddress?: string | null
    ): TypedEventFilter<[string], { relayerAddress: string }>;

    RelayerAdded(
      relayerAddress?: string | null
    ): TypedEventFilter<[string], { relayerAddress: string }>;

    "RelayerRemoved(address)"(
      relayerAddress?: string | null
    ): TypedEventFilter<[string], { relayerAddress: string }>;

    RelayerRemoved(
      relayerAddress?: string | null
    ): TypedEventFilter<[string], { relayerAddress: string }>;

    "VerifierAdded(tuple)"(
      verifier?: null
    ): TypedEventFilter<
      [[string, number] & { contractAddress: string; merkleTreeDepth: number }],
      {
        verifier: [string, number] & {
          contractAddress: string;
          merkleTreeDepth: number;
        };
      }
    >;

    VerifierAdded(
      verifier?: null
    ): TypedEventFilter<
      [[string, number] & { contractAddress: string; merkleTreeDepth: number }],
      {
        verifier: [string, number] & {
          contractAddress: string;
          merkleTreeDepth: number;
        };
      }
    >;

    "VerifierRemoved(tuple)"(
      verifier?: null
    ): TypedEventFilter<
      [[string, number] & { contractAddress: string; merkleTreeDepth: number }],
      {
        verifier: [string, number] & {
          contractAddress: string;
          merkleTreeDepth: number;
        };
      }
    >;

    VerifierRemoved(
      verifier?: null
    ): TypedEventFilter<
      [[string, number] & { contractAddress: string; merkleTreeDepth: number }],
      {
        verifier: [string, number] & {
          contractAddress: string;
          merkleTreeDepth: number;
        };
      }
    >;

    "Withdraw(address)"(
      operator?: string | null
    ): TypedEventFilter<[string], { operator: string }>;

    Withdraw(
      operator?: string | null
    ): TypedEventFilter<[string], { operator: string }>;
  };

  estimateGas: {
    addMember(
      _immunizationId: BigNumberish,
      _identityCommitment: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addRelayer(
      _relayer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createImmunization(
      _immunizationId: BigNumberish,
      _depth: BigNumberish,
      _zeroValue: BigNumberish,
      _vaccineType: string,
      _vaccineCodeSystem: string,
      _vaccineCodeCode: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isEligible(
      _immunizationId: BigNumberish,
      _vaccineCodeSystem: string,
      _vaccineCodeCode: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeMember(
      _immunizationId: BigNumberish,
      _identityCommitment: BigNumberish,
      _proofSiblings: BigNumberish[],
      _proofPathIndices: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeRelayer(
      _relayer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    verifyMembership(
      _immunizationId: BigNumberish,
      _signal: BytesLike,
      _nullifierHash: BigNumberish,
      _externalNullifier: BigNumberish,
      _proof: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addMember(
      _immunizationId: BigNumberish,
      _identityCommitment: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addRelayer(
      _relayer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createImmunization(
      _immunizationId: BigNumberish,
      _depth: BigNumberish,
      _zeroValue: BigNumberish,
      _vaccineType: string,
      _vaccineCodeSystem: string,
      _vaccineCodeCode: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isEligible(
      _immunizationId: BigNumberish,
      _vaccineCodeSystem: string,
      _vaccineCodeCode: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeMember(
      _immunizationId: BigNumberish,
      _identityCommitment: BigNumberish,
      _proofSiblings: BigNumberish[],
      _proofPathIndices: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeRelayer(
      _relayer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    verifyMembership(
      _immunizationId: BigNumberish,
      _signal: BytesLike,
      _nullifierHash: BigNumberish,
      _externalNullifier: BigNumberish,
      _proof: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
